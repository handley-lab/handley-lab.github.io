from google import genai
import requests
import os
import feedparser
from pandas import to_datetime
from io import BytesIO
import tarfile
import sys
import yaml

#TODO: check for improvements that can be made with a view to getting talks to work

arxiv = sys.argv[1]
#arxiv = '2503.08658'

# Algorithm parameters
basic_model = "gemini-1.5-flash"
text_model = "gemini-1.5-pro"
image_model = "imagen-3.0-generate-002"
url_model = "https://deepmind.google/technologies/gemini/"
client = genai.Client(api_key=os.environ["GEMINI_API_KEY"])

# Get arxiv metadata
print(f"Getting metadata for {arxiv}")
url = f"https://export.arxiv.org/api/query?id_list={arxiv}"
response = requests.get(url)
response.raise_for_status()
feed = feedparser.parse(response.content)
metadata = feed.entries[0]
dt = to_datetime(feed.entries[0].published)
title = metadata.title.replace('\n', '')
print(f"Generating post for \"{title}\"")

# Read group yaml file:
with open('assets/group/group.yaml', 'r') as f:
    group = f.read()
    group = yaml.safe_load(group)

# Read group homepage
with open('index.md', 'r') as f:
    homepage = f.read()


# Extract author info
print(f"Retrieving author data for {metadata.authors} from assets/group/group.yaml")
contents = f"""
Find the dictionary keys in the following group:
```python
{group.keys()}
```
that most closely match the following authors:
```python
{metadata.authors}
```
Give your answer as comma separate list of keys, in the same order as the authors list. If you cannot find a match, just list the original author name.
"""
response = client.models.generate_content(model=basic_model, contents=contents)
authors = response.text.split(',')
authors = {author.strip():group.get(author.strip(), author.strip()) for author in authors}

for a, dat in authors.items():
    try:
        if dat['image'].startswith('images/'):
            dat['image'] = f'/assets/group/{dat["image"]}'
    except KeyError:
        dat['image'] = '/assets/images/user.png'

postname = f'{dt.strftime("%Y-%m-%d")}-{arxiv}'
imagename = f'/assets/images/posts/{postname}.png'
prompt_save = f'/prompts/posts/{postname}.md'
image_prompt_save = f'/prompts/images/{postname}.md'

# Get arxiv source
print(f"Getting source for {arxiv}")
response = requests.get(f'https://arxiv.org/src/{arxiv}')
tar_stream = BytesIO(response.content)
tex = ''
bbl = ''
with tarfile.open(fileobj=tar_stream, mode='r') as tar:
    for member in tar.getmembers():
        file = tar.extractfile(member)
        if member.name.endswith('.tex'):
            tex += file.read().decode('utf-8')
        if member.name.endswith('.bbl'):
            bbl += file.read().decode('utf-8')

# Retrieve images for authors
height = 100//max(len(authors)+1, 4)
style = f'width: auto; height: {height}vw;'
images = ''.join([f"<img src=\"{dat['image']}\" alt=\"{a}\" style=\"{style}\">" for a, dat in authors.items()])

prompt = f"""
Title: Create a Markdown Blog Post Integrating Research Details and a Featured Paper
====================================================================================

This task involves generating a Markdown file (ready for a GitHub-served Jekyll site) that integrates our research details with a featured research paper. The output must follow the exact format and conventions described below.

====================================================================================
Output Format (Markdown):
------------------------------------------------------------------------------------
---
layout: post
title:  "{metadata.title}"
date:   {dt.strftime('%Y-%m-%d')}
categories: papers
---
![AI generated image]({imagename})\n
<!-- BEGINNING OF GENERATED POST -->
<!-- END OF GENERATED POST -->\n
{images}\n
Content generated by [{text_model}]({url_model}) using [this prompt]({prompt_save}).\n
Image generated by [{image_model}]({url_model}) using [this prompt]({image_prompt_save}).\n
------------------------------------------------------------------------------------
====================================================================================

Please adhere strictly to the following instructions:

====================================================================================
Section 1: Content Creation Instructions
====================================================================================

1. **Generate the Page Body:**
   - Write a well-composed, engaging narrative that is suitable for a scholarly audience interested in advanced AI and astrophysics.
   - Ensure the narrative is original and reflective of the tone and style and content in the "Homepage Content" block (provided below), but do not reuse its content.
   - Use bullet points, subheadings, or other formatting to enhance readability.

2. **Highlight Key Research Details:**
   - Emphasize the contributions and impact of the paper, focusing on its methodology, significance, and context within current research.
   - Specifically highlight the lead author ({metadata.authors[0]}). When referencing any author, use Markdown links from the Author Information block (choose academic or GitHub links over social media).

3. **Integrate Data from Multiple Sources:**
   - Seamlessly weave information from the following:
     - **Paper Metadata (YAML):** Essential details including the title and authors.
     - **Paper Source (TeX):** Technical content from the paper.
     - **Bibliographic Information (bbl):** Extract bibliographic references.
     - **Author Information (YAML):** Profile details for constructing Markdown links.
   - Merge insights from the Paper Metadata, TeX source, Bibliographic Information, and Author Information blocks into a coherent narrative—do not treat these as separate or isolated pieces.
   - Insert the generated narrative between the HTML comments:
     <!-- BEGINNING OF GENERATED POST --> and <!-- END OF GENERATED POST -->

4. **Generate Bibliographic References:**
   - Review the Bibliographic Information block carefully.
   - For each reference that includes a DOI or arXiv identifier:
     - For DOIs, generate a link formatted as:
       [10.1234/xyz](https://doi.org/10.1234/xyz)
     - For arXiv entries, generate a link formatted as:
       [2103.12345](https://arxiv.org/abs/2103.12345)
    - **Important:** Do not use any LaTeX citation commands (e.g., `\\cite{{...}}`). Every reference must be rendered directly as a Markdown link. For example, instead of `\\cite{{mycitation}}`, output `[mycitation](https://doi.org/mycitation)`
        - **Incorrect:** `\\cite{{10.1234/xyz}}`  
        - **Correct:** `[10.1234/xyz](https://doi.org/10.1234/xyz)`
   - Ensure that at least three (3) of the most relevant references are naturally integrated into the narrative.
   - Ensure that the link to the Featured paper [{arxiv}](https://arxiv.org/abs/{arxiv}) is included in the first sentence.

5. **Final Formatting Requirements:**
   - The output must be plain Markdown; do not wrap it in Markdown code fences.
   - Preserve the YAML front matter exactly as provided.

====================================================================================
Section 2: Provided Data for Integration
====================================================================================

1. **Homepage Content (Tone and Style Reference):**
```markdown
{homepage}
```

2. **Paper Metadata:**
```yaml
{yaml.dump(metadata, sort_keys=False)}
```

3. **Paper Source (TeX):**
```tex
{tex}
```

4. **Bibliographic Information:**
```bbl
{bbl}
```

5. **Author Information:**
- Lead Author: {metadata.authors[0]}
- Full Authors List:
```yaml
{yaml.dump(authors, sort_keys=False)}
```
This YAML file provides a concise snapshot of an academic research group. It lists members by name along with their academic roles—ranging from Part III and summer projects to MPhil, PhD, and postdoctoral positions—with corresponding dates, thesis topics, and supervisor details. Supplementary metadata includes image paths and links to personal or departmental webpages. A dedicated "coi" section profiles senior researchers, highlighting the group’s collaborative mentoring network and career trajectories in cosmology, astrophysics, and Bayesian data analysis.



====================================================================================
Final Output Instructions
====================================================================================

- Combine all data sources to create a seamless, engaging narrative.
- Follow the exact Markdown output format provided at the top.
- Do not include any extra explanation, commentary, or wrapping beyond the specified Markdown.
- Validate that every bibliographic reference with a DOI or arXiv identifier is converted into a Markdown link as per the examples.
- Validate that every Markdown author link corresponds to a link in the author information block.
- Before finalizing, confirm that no LaTeX citation commands or other undesired formatting remain.
- Before finalizing, confirm that the link to the paper itself [{arxiv}](https://arxiv.org/abs/{arxiv}) is featured in the first sentence.

Generate only the final Markdown output that meets all these requirements.
"""

print("Generating post")
response = client.models.generate_content(model=text_model, contents=prompt)
post = response.text

print ("Generating image prompt")
pre_image_prompt=f"""
Generate a prompt which will generate an image to headline this post:
```markdown
{post}
```
The image should be abstract, and not try to relay any quantitative information (so no graphs, numbers or text). It should be visually appealing and related to the topic of the paper.
"""
response = client.models.generate_content(model=text_model, contents=pre_image_prompt)
image_prompt = response.text

print("Generating image")
response = client.models.generate_images(model=image_model, prompt=image_prompt, config=genai.types.GenerateImagesConfig(aspect_ratio="16:9", number_of_images=1))
response

from PIL import Image
image = Image.open(BytesIO(
    response.generated_images[0].image.image_bytes
    )).convert("RGBA")

# Save post
with open(f'_posts/{postname}.md', 'w') as f:
    f.write(post)
print(f"Post saved to _posts/{postname}.md")

# Save image
image.save(f'.{imagename}', format='PNG', optimize=True)
print(f"Image saved to .{imagename}")

# Save prompts
with open(f'.{prompt_save}', 'w') as f:
    f.write("{% raw %}\n" + prompt + "\n{% endraw %}")
print(f"Prompt saved to .{prompt_save}")

with open(f'.{image_prompt_save}', 'w') as f:
    f.write("{% raw %}\n" + image_prompt + "\n{% endraw %}")
print(f"Image prompt saved to .{image_prompt_save}")
